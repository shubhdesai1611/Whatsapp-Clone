{"ast":null,"code":"var _jsxFileName = \"/Users/shubhdesai/Documents/VS Code/Wp/client/src/chat/menu/Conversations.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { getUsers } from \"../../service/api\";\nimport Conversation from \"./Conversation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Conversations = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      let response = await getUsers();\n      setUsers(response);\n    };\n    fetchData();\n  }, []); // empty array means only call once when mounted\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: users.map(user => /*#__PURE__*/_jsxDEV(Conversation, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Conversations, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = Conversations;\nexport default Conversations;\nvar _c;\n$RefreshReg$(_c, \"Conversations\");","map":{"version":3,"names":["React","Box","useEffect","useState","getUsers","Conversation","jsxDEV","_jsxDEV","Conversations","_s","users","setUsers","fetchData","response","children","map","user","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shubhdesai/Documents/VS Code/Wp/client/src/chat/menu/Conversations.jsx"],"sourcesContent":["import React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nimport { getUsers } from \"../../service/api\";\n\nimport Conversation from \"./Conversation\";\n\nconst Conversations = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let response = await getUsers();\n      setUsers(response);\n    };\n    fetchData();\n  }, []); // empty array means only call once when mounted\n\n  return (\n    <Box>\n      {users.map((user) => (\n        <Conversation user={user} />\n      ))}\n    </Box>\n  );\n};\n\nexport default Conversations;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIC,QAAQ,GAAG,MAAMT,QAAQ,CAAC,CAAC;MAC/BO,QAAQ,CAACE,QAAQ,CAAC;IACpB,CAAC;IACDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA,CAACN,GAAG;IAAAa,QAAA,EACDJ,KAAK,CAACK,GAAG,CAAEC,IAAI,iBACdT,OAAA,CAACF,YAAY;MAACW,IAAI,EAAEA;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACX,EAAA,CAlBID,aAAa;AAAAa,EAAA,GAAbb,aAAa;AAoBnB,eAAeA,aAAa;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}